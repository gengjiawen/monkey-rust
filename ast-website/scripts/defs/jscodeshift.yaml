"!name": jscodeshift
"!define":
  file:
    source:
      "!type": string
      "!doc": The source code of the current file.
    path:
      "!type": string
      "!doc": The absolute path to the current file

  # jscodeshift API + type definitions
  apiObject:
    stats:
      "!type": "fn(value: string)"
      "!doc": "Helper function to collect data during --dry runs. This function keeps a counter for how often it was called with a specific argument. The result is shown in the console. Useful for finding out how many files match a criterion."
    jscodeshift:
      "!type": "fn(source: string|+NodePath) -> +Collection"
      template:
        expression:
          "!type": "fn(strings: [string], value: ?, value: ?) -> Expression"
          "!doc": "Tagged template function. Parses the string as source and returns an Expression AST node."
        statement:
          "!type": "fn(strings: [string], value: ?, value: ?) -> Statement"
          "!doc": "Tagged template function. Parses the string as source and returns an Statement AST node."
        statements:
          "!type": "fn(strings: [string], value: ?, value: ?) -> [Statement]"
          "!doc": "Tagged template function. Parses the string as source and returns an array of Statement AST nodes."
      match:
        "!type": "fn(node: ASTNode, pattern: object) -> bool"
        "!doc": "Returns true if node matches the pattern, else false"
  Collection:
    '!type:': 'fn(source: [+NodePath], parent: +Collection)'
    prototype:
      filter: 
        '!type': 'fn(callback: fn(path: +NodePath) -> bool) -> +Collection'
        '!doc': Returns a new collection containing the nodes for which the callback returns true.
        '!effects':
          - 'call !0 this=+NodePath +NodePath'
      forEach:
        '!type': 'fn(callback: fn(path: +NodePath)) -> !this'
        '!doc': Executes callback for each NodePath in the collection.
        '!effects':
          - 'call !0 this=+NodePath +NodePath'
      map:
        '!type': 'fn(callback: fn(path: +NodePath) -> +NodePath|[+NodePath]) -> +Collection'
        '!doc': |
          Executes the callback for every path in the collection and returns a
          new collection from the return values (which must be paths).

          The callback can return null to remove the element from the new collection.

          If an array is returned, it will be flattened into the result colletion.
        '!effects':
          - 'call !0 this=+NodePath +NodePath'
      size:
        '!type': 'fn() -> number'
        '!doc': Returns the number of elements in this collection.
      nodes:
        '!type': 'fn() -> [ASTNode]'
        '!doc': Returns an array of AST nodes in this collection.
      paths:
        '!type': 'fn() -> [NodePath]'
        '!doc': Returns an array of NodePaths in this this collection.
      toSource:
        '!type': 'fn(options?: object) -> string'
        '!doc': Converts the AST back to a string, using recast. The options are directly passed to recast's printer.
      at:
        '!type': 'fn(index: number) -> +Collection'
        '!doc': | 
          Returns a new collection containing only the element at the position
          `index`. In case of a negative index, the element is taken from the end.
      get:
        '!type': 'fn(name: string|number) -> +NodePath'
        '!doc': Calls "get" on the first path (same as "collection.paths(0).get(...)").

      # Node specific methods
      find:
        '!type': 'fn(type: TypeDefinition, filter?: object) -> +Collection'
        '!doc': Finds descendants of a specific type within the Nodes of this collection.
      closestScope:
        '!type': 'fn() -> +Collection'
        '!doc': Returns a collection containing the Paths that create the scope which contains the selected Nodes.
      closest:
        '!type': 'fn(type: TypeDefinition, filter?: object) -> +Collection'
        '!doc': For each node in the collection, traverses the AST up and finds the closest node that matches the type and filter.
      replaceWith:
        '!type': 'fn(nodes: ASTNode|fn(path: +NodePath, index: number) -> ASTNode|[ASTNode]) -> !this'
        '!doc': |
          Replaces the selected nodes with the provided node(s). If a function is
          provided, it is executed for every node and the node is replaced with
          the return value of the function.
        '!effects':
          - 'call !0 this=+NodePath +NodePath number'
      insertBefore:
        '!type': 'fn(nodes: ASTNode|[ASTNode]|fn(path: +NodePath, index: number) -> ASTNode|[ASTNode]) -> !this'
        '!doc': |
          Inserts the new node(s) before each of the selected nodes. If a function
          is provided, it is executed for every node and return value is inserted
          before that node.
        '!effects':
          - 'call !0 this=+NodePath +NodePath'
      insertAfter:
        '!type': 'fn(nodes: ASTNode|[ASTNode]|fn(path: +NodePath, index: number) -> ASTNode|[ASTNode]) -> !this'
        '!doc': |
          Inserts the new node(s) after each of the selected nodes. If a function
          is provided, it is executed for every node and return value is inserted
          after that node.
        '!effects':
          - 'call !0 this=+NodePath +NodePath'
      remove:
        '!type': 'fn() -> !this'
        '!doc': Calls "prune" on every selected NodePath.

  # ast-types
  NodePath: 
    "!type": "fn(value: ASTNode|[ASTNode], parentPath: +NodePath, name: string)"
    '!effects':
      - 'propagate !0 !this.value'
    prototype: 
      parentPath: +NodePath
      name: string
      node:
        '!type': 'ASTNode'
        '!doc': The value of the first ancestor NodePath whose value is a Node.
      parent:
        '!type': '+NodePath'
        '!doc': The first ancestor Path whose value is a Node distinct from this.node.
      scope: 
        '!type': '+Scope'
        '!doc': The closest enclosing scope that governs this node.
      replace:
        '!type': 'fn(newNode?: ASTNode|[ASTNode])'
        '!doc': Replaces the Node(s) represented by this Path, or removes it if no argument is passed.
      prune:
        '!type': 'fn()'
        '!doc': Removes this Node and any ancestor that would become "empty".
      getValueProperty:
        '!type': 'fn(name: string) -> ?'
        '!doc': | 
          Returns the value of of that property. This is different from 'path.node.value' because
          it will return the default value for that field as defined in the Node definition.
      each:
        '!type': 'fn(callback: fn(childPath: +NodePath), context?: ?)'
        '!doc': | 
          If the Path represents an array of nodes, applies the provided function to each
          Node in the array.
        '!effects':
          - 'call !0 this=!1 !this.value.<i> !this'
      map:
        '!type': 'fn(callback: fn(childPath: +NodePath) -> ?, context?: ?) -> [?]'
        '!doc': | 
          If the Path represents an array of nodes, applies the provided function to each
          Node in the array and returns an array of the results.
        '!effects':
          - 'call !0 this=!1 !this.value.<i> !this'
      filter:
        '!type': 'fn(callback: fn(childPath: +NodePath) -> bool, context?: ?) -> [+NodePath]'
        '!doc': | 
          If the Path represents an array of nodes, applies the provided function to each
          Node in the array and returns an array of Paths for which the callback returned true.
        '!effects':
          - 'call !0 this=!1 !this.value.<i> !this'
      shift:
        '!type': 'fn() -> +NodePath'
        '!doc': | 
          If the Path represents an array of nodes, removes the first Node in that array and returns it.
      unshift:
        '!type': 'fn(newNode: ASTNode)'
      push:
        '!type': 'fn(newNode: ASTNode)'
      pop:
        '!type': 'fn() -> NodePath'
      insertAt:
        '!type': 'fn(index: number, node: ASTNode)'
      insertBefore:
        '!type': 'fn(node: ASTNode)'
      insertAfter:
        '!type': 'fn(node: ASTNode)'
  ASTNode:
    type:
      '!type': string
      '!doc': The type of this AST node.
  Scope:
    '!type': 'fn(path: +NodePath, parentScope: +Scope)'
    isEstablishedBy: 'fn(node: ASTNode) -> bool'
    prototype:
      declares: 'fn(name: string) -> bool'
      declaresType: 'fn(name: string) -> bool'
      declareTemporary: 'fn(prefix: string) -> Identifier'
      injectTemporary: 'fn(prefix: string, init?: ASTNode) -> Identifier'
      getBindings: 'fn() -> [ASTNode]'
      getTypes: 'fn() -> [ASTNode]'
      lookup: 'fn(name: string) -> +Scope'
      lookupType: 'fn(name: string) -> +Scope'
    getGlobalScope: 'fn() -> +Scope'
